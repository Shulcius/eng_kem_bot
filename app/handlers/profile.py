from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import json

from app.database.models import get_user_by_telegram_id, update_user
from app.keyboards.reply import cancel_kb
from app.states.EditField import EditField
from app.states.registration import Registration
from app.keyboards.inline import main_menu_kb, skills_inline_kb_edit, activity_inline_kb_edit

router = Router()


@router.callback_query(F.data == "menu_edit")
async def show_edit_menu(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        return await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")

    kb = InlineKeyboardBuilder()
    kb.button(text="üìù –§–ò–û", callback_data="edit_fullname")
    kb.button(text="üìÖ –í–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age")
    kb.button(text="üèôÔ∏è –ì–æ—Ä–æ–¥", callback_data="edit_city")
    kb.button(text="üìã –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_description")
    kb.button(text="üíº –ù–∞–≤—ã–∫–∏", callback_data="edit_skills")
    kb.button(text="üß≠ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å", callback_data="edit_activity")
    kb.button(text="üñº –§–æ—Ç–æ", callback_data="edit_photo")
    kb.button(text="üîÅ –ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="edit_restart")
    kb.button(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="main_menu")
    kb.adjust(2)
    await callback.message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?", reply_markup=kb.as_markup())
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def go_to_main(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_kb())
    await callback.answer()


@router.callback_query(F.data == "edit_restart")
async def restart_profile(callback: CallbackQuery, state: FSMContext):
    user = get_user_by_telegram_id(callback.from_user.id)
    if not user:
        return await callback.message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /start.")
    skills = set(json.loads(user["skills"])) if user["skills"] else set()
    await state.set_data({
        "fullname": user["fullname"],
        "age": user["age"],
        "city": user["city"],
        "description": user["description"],
        "seeking": user["seeking"],
        "skills": skills,
        "activity": user["activity"],
        "photo_path": user["photo_path"],
    })
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=cancel_kb())
    await state.set_state(Registration.fullname)
    await callback.answer()


@router.callback_query(F.data.in_({
    "edit_fullname", "edit_age", "edit_city",
    "edit_description", "edit_photo"
}))
async def handle_text_field_edit(callback: CallbackQuery, state: FSMContext):
    field_map = {
        "edit_fullname": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û:", EditField.fullname),
        "edit_age": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:", EditField.age),
        "edit_city": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:", EditField.city),
        "edit_description": ("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:", EditField.description),
        "edit_photo": ("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ:", EditField.photo)
    }

    message_text, new_state = field_map[callback.data]
    await state.set_state(new_state)

    await callback.message.answer(message_text, reply_markup=cancel_kb() if new_state != EditField.photo else None)
    await callback.answer()


# ======= –û–¢–î–ï–õ–¨–ù–û–ï –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–õ–ï–ô =======

@router.message(EditField.fullname)
async def save_fullname(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=message.text,
        age=user["age"],
        city=user["city"],
        project_name=user["project_name"],
        description=user["description"],
        skills=user["skills"],
        activity=user["activity"],
        photo_path=user["photo_path"]
    )
    await state.clear()
    await message.answer("–§–ò–û –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
    profile_text = f"üë§ –ò–º—è: {message.text}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await message.answer(profile_text, reply_markup=keyboard)

    await state.clear()


@router.message(EditField.age)
async def save_age(message: Message, state: FSMContext):
    if not message.text.isdigit():
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
    age = int(message.text)
    if not (10 <= age <= 100):
        return await message.answer("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 10 –¥–æ 100.")
    user = get_user_by_telegram_id(message.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=age,
        city=user["city"],
        project_name=user["project_name"],
        description=user["description"],
        skills=user["skills"],
        activity=user["activity"],
        photo_path=user["photo_path"]
    )
    await state.clear()
    await message.answer("–í–æ–∑—Ä–∞—Å—Ç –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await message.answer(profile_text, reply_markup=keyboard)

    await state.clear()


@router.message(EditField.city)
async def save_city(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=user["age"],
        city=message.text,
        project_name=user["project_name"],
        description=user["description"],
        skills=user["skills"],
        activity=user["activity"],
        photo_path=user["photo_path"]
    )
    await state.clear()
    await message.answer("–ì–æ—Ä–æ–¥ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {message.text}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await message.answer(profile_text, reply_markup=keyboard)

    await state.clear()


@router.message(EditField.description)
async def save_description(message: Message, state: FSMContext):
    user = get_user_by_telegram_id(message.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=user["age"],
        city=user["city"],
        project_name=user["project_name"],
        description=message.text,
        skills=user["skills"],
        activity=user["activity"],
        photo_path=user["photo_path"]
    )
    await state.clear()
    await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {message.text}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await message.answer(profile_text, reply_markup=keyboard)

    await state.clear()


# ======= –ù–ê–í–´–ö–ò =======
@router.callback_query(F.data == "edit_skills")
async def handle_edit_skills(callback: CallbackQuery, state: FSMContext):
    user = get_user_by_telegram_id(callback.from_user.id)
    skills_edit = set(user["skills"]) if isinstance(user["skills"], list) else set(json.loads(user["skills"]))
    await state.set_state(EditField.edit_skills)
    await state.update_data(skills=skills_edit)

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–≤—ã–∫–∏:", reply_markup=skills_inline_kb_edit(skills_edit))
    await callback.answer()


@router.callback_query(F.data == "edit_skills_done")
async def confirm_editing_skills(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = get_user_by_telegram_id(callback.from_user.id)
    updated_skills = list(data.get("skills", set()))

    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=user["age"],
        city=user["city"],
        project_name=user["project_name"],
        description=user["description"],
        skills=updated_skills,
        activity=user["activity"],
        photo_path=user["photo_path"]
    )

    await state.clear()

    user = get_user_by_telegram_id(callback.from_user.id)

    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await callback.message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await callback.message.answer(profile_text, reply_markup=keyboard)

    await callback.answer()


# ======= –ê–ö–¢–ò–í–ù–û–°–¢–¨ =======
@router.callback_query(F.data == "edit_activity")
async def handle_edit_activity(callback: CallbackQuery, state: FSMContext):
    user = get_user_by_telegram_id(callback.from_user.id)
    await state.set_state(EditField.activity)
    await state.update_data(activity=user["activity"])

    await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:", reply_markup=activity_inline_kb_edit(user["activity"]))
    await callback.answer()


@router.callback_query(F.data.startswith("activityedit_"), EditField.activity)
async def select_activity(callback: CallbackQuery, state: FSMContext):
    activity = callback.data[9:]
    await state.update_data(activity=activity)
    await callback.message.edit_reply_markup(reply_markup=activity_inline_kb_edit(activity))
    await callback.answer()


@router.callback_query(F.data == "activity_confirm_edit", EditField.activity)
async def confirm_activity(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    user = get_user_by_telegram_id(callback.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=user["age"],
        city=user["city"],
        project_name=user["project_name"],
        description=user["description"],
        skills=user["skills"],
        activity=data["activity"],
        photo_path=user["photo_path"]
    )
    await state.clear()
    await callback.message.answer("–í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª—ë–Ω ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")
    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await callback.message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await callback.message.answer(profile_text, reply_markup=keyboard)

    await state.clear()
    await callback.answer()


# ======= –§–û–¢–û =======

@router.message(EditField.photo, F.photo)
async def photo_upload(message: Message, state: FSMContext, bot: Bot):
    photo = message.photo[-1]
    photo_file_id = photo.file_id

    user = get_user_by_telegram_id(message.from_user.id)
    update_user(
        user_id=user["id"],
        fullname=user["fullname"],
        age=user["age"],
        city=user["city"],
        project_name=user["project_name"],
        description=user["description"],
        skills=user["skills"],
        activity=user["activity"],
        photo_path=photo_file_id
    )

    user = get_user_by_telegram_id(message.from_user.id)
    await state.clear()
    await message.answer("–§–æ—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ ‚úÖ\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é")

    profile_text = f"üë§ –ò–º—è: {user['fullname']}\n"
    profile_text += f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {user['age']}\n"
    profile_text += f"üèô –ì–æ—Ä–æ–¥: {user['city']}\n"
    profile_text += f"üíº –ù–∞–≤—ã–∫–∏: {', '.join(user['skills']) if user['skills'] else '–Ω–µ —É–∫–∞–∑–∞–Ω—ã'}\n"
    profile_text += f"‚öôÔ∏è –í–∏–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {user['seeking']}\n"

    if user['seeking'] == 'developer':
        if user.get('project_name'):
            profile_text += f"\nüìå –ü—Ä–æ–µ–∫—Ç: {user['project_name']}\n"
        if user.get('description'):
            profile_text += f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"
    else:
        if user.get('description'):
            profile_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: {user['description']}\n"

    from app.keyboards.inline import main_menu_kb
    keyboard = main_menu_kb()

    if user.get('photo_path'):
        await message.answer_photo(photo=user['photo_path'], caption=profile_text, reply_markup=keyboard)
    else:
        await message.answer(profile_text, reply_markup=keyboard)

    await state.clear()


@router.message(EditField.photo)
async def photo_no_photo(message: Message):
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –≤ –≤–∏–¥–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")


# ======= –û–¢–ú–ï–ù–ê =======

@router.message(F.text == "–û—Ç–º–µ–Ω–∞")
async def cancel_edit(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=main_menu_kb())


@router.callback_query(F.data.startswith("skilledit_"))
async def process_skilledit_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    skills_edit = set(data.get("skills", []))

    skill = callback.data.split("_", 1)[1]
    if skill in skills_edit:
        skills_edit.remove(skill)
    else:
        skills_edit.add(skill)

    await state.update_data(skills=skills_edit)

    await callback.message.edit_reply_markup(reply_markup=skills_inline_kb_edit(skills_edit))
    await callback.answer()